{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"yMAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACjB,qBAAuB,iBAEzB,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,yBAAQC,QAASL,EAAjB,cAAqCC,S,gBCPrCK,EAAU,aAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCF9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,qBAAKd,UAAU,QAAf,SACGc,KCDHC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAuHSC,EAnHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,IAJjC,mBAITO,EAJS,KAIKC,EAJL,KAkBhBC,qBAAU,WACRC,IAECzB,MAAK,SAAA0B,GACJT,EAASS,QAEV,IAGH,IAwDMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACf,cAAC,EAAD,CAEExC,KAAMA,EACNC,iBAAkB,kBA/CD,SAACc,GACjB,sCAAkCA,GAA3C,IACMf,EAAO0B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAKhDgC,EACUpB,EAAI4B,GACXjC,MAAK,SAAAkC,GACJjB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO4C,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAE3B,KAAOA,SA2BRiC,CAAmBhD,EAAKe,MAF3CyB,QAMX,uBAAMS,SA9EM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASuB,EACTyB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAa3BtB,EACUiB,GACP1C,MAAK,SAAAkC,GACJjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QAwDf,UACE,uBAAO8B,MAAO/B,EAASgC,SA5BJ,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB9B,EAAWqB,EAAMa,OAAOJ,UA2BpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCzFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.35328388.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n  ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}> {label}</button>\r\n    </li>\r\n  )\r\n}\r\n  \r\nexport default Note","import axios from 'axios'\r\n/*const baseUrl = 'http://localhost:3001/notes'*/\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\n\nconst Footer = () => {  \n  const footerStyle = {    \n    color: 'green',    \n    fontStyle: 'italic',    \n    fontSize: 16  \n  }  \n  return (    \n    <div style={footerStyle}>      \n      <br />      \n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>    \n    </div>  \n  )}\n\nconst App = () => {  \n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  /*const hook = () => {\n    console.log('effect')    \n    axios      \n      .get('http://localhost:3001/notes')\n      .then(response => {        \n        console.log('promise fulfilled')        \n        setNotes(response.data)      \n      })\n  }  \n\n  useEffect(hook, [])*/\n\n  useEffect(() => {\n    noteService      \n    .getAll()      \n    .then(initialNotes => {        \n      setNotes(initialNotes)      \n    })  \n  }, [])\n  \n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      /*id: notes.length + 1,*/\n    }\n\n    /*setNotes(notes.concat(noteObject))\n    setNewNote('')*/\n    \n    /*axios    \n      .post('http://localhost:3001/notes', noteObject)   \n      .then(response => {      \n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })*/\n      noteService      \n        .create(noteObject)      \n        .then(returnedNote => {        \n          setNotes(notes.concat(returnedNote))        \n          setNewNote('')      \n        })\n\n    }\n\n  const toggleImportanceOf = (id) => {    \n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    /*axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data))\n    })*/\n    noteService      \n      .update(id, changedNote)      \n      .then(returnedNote => {        \n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))      \n      })\n      .catch(error => {      \n        setErrorMessage(          \n          `Note '${note.content}' was already removed from server`        \n        )        \n        setTimeout(() => {          \n          setErrorMessage(null)        \n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))    \n      })  \n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll \n    ? notes \n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n            key={i} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)} \n          /> \n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type='submit'>save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n/*import axios from 'axios'\n\nconst promise = axios.get('http://localhost:3001/notes')\nconsole.log(promise)\n\npromise.then(response => {\n  console.log(response)\n})\n\nconst promise2 = axios.get('http://localhost:3001/foobar')\nconsole.log(promise2)\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]*/\n\n/*let results = notes.map(x => x.id)\nconsole.log(results)*/\n\n/*ReactDOM.render(<App notes={notes} />, document.getElementById('root'))*/\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}